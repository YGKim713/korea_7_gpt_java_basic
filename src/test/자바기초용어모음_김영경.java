package test;

public class 자바기초용어모음_김영경 {
    // 접근 제한자
/*
* public : 어떤 클래스에 있든, 어떤 패키지에 있든 접근 가능
* protected : 같은 패키지 내 접근 가능, 다른 패키지에 있을 시 상속관계이면 접근 가능((다른패키지)부모->자식)
* default : 같은 패키지 내 접근 가능. 기본적으로 생략되어있고, default를 선언하면 오류 발생
* private : 같은 클래스 내 접근 가능
* */



    // static
/*
* static(정적) 키워드
* 객체에 속한 변수나 메서드가 아닌, 클래스 자체에 속한 변수나 메서드
* 일반 멤버(변수, 메서드)는 인스턴스화 필수
* 정적 멤버는 인스턴스화 필수 X, 클래스명으로 바로 호출 가능
*
* static 클래스 >> 내부(중첩)클래스의 개념
* */

    // final
/*
* 변하지 않는 멤버
* final 변수 : 상수
* final 메서드 : 재정의 불가능
* final 클래스 : 상속 불가능
* */

    // super VS this
/*
* super : 부모클래스를 상속받은 자식 클래스에서 부모 클래스의 멤버를 호출할 때 사용
* this : 클래스 내에서 선언된 멤버의 이름과 해당 클래스에 있는 메서드 내에서 선언된 지역 멤버의 이름이 같을 때
*           클래스 내의 멤버와 지역 멤버를 구분하기 위해 사용
* */

    // 오버로딩 VS 오버라이딩
/*
* 오버로딩(Overloading) : 클래스 내에서 같은 이름의 메서드 선언시 사용.
*                           변수 타입, 변수의 순서, 개수가 달라야함.
* 오버라이딩(Overriding) : 부모 클래스를 상속받은 자식 클래스에서 부모 클래스의 메서드를 재정의할 때 사용
* */

    // abstract
/*
* 추상화(abstract)
* 실존하지 않는 객체 또는 메서드를 정의. 클래스와 메서드를 추상화할 수 있음.
*
* 추상 클래스 : 실존하지 않는 객체를 정의. 추상 메서드를 가질 수 있으며, 필드, 생성자, 일반 메서드를 가질 수 있음.
*               해당 클래스 자체로 객체 생성 불가. 따라서 실존하지 않는 객체의 인스턴스화를 방지 할 수 있음.
*
* 추상 메서드 : 구현부가 없는 메서드. 추상 클래스를 상속받는 클래스에서 구현한다.
*               이를 이용해 서로 관계 없는 클래스에 구현부가 다른 공통된 이름의 메서드 정의 가능.
* */

    // interface VS abstract class
/*
* interface (인터페이스)
* - 객체의 기능을 정의.
* - 인터페이스 내의 모든 필드에는 public static final 이 생략되어있음
* - 인터페이스 내의 모든 메서드에는 public abstract 이 생략되어있음
* - 인터페이스 내 default 메서드, static 메서드가 존재 가능
* - 다중 구현 가능
*
* abstract class (추상 클래스)
* - 추상화 된 객체 정의.
* - 추상 클래스 내에 일반 필드 존재 가능.
* - 추상 클래스 내에 일반 메서드 존재 가능. 생성자 존재 가능.
* - abstract 메서드는 일반 클래스에서 사용 불가, 추상 클래스(또는 인터페이스) 내에서만 존재 가능.
* - 다중 상속 불가능
*
* */

    // extends VS implements
/*
* extends : '확장'의 개념. 상속관계를 나타낼 때 사용. (클래스-클래스, 인터페이스-인터페이스)
*           다중 상속 불가능 (ex. class A extends B, extends C ---> X)
* implements : '구현'의 개념. 인터페이스를 클래스에 구현할 때 사용.
*           다중 구현 가능 (ex. class A implements B, C ---> O)
*
* */

    // try-catch-finally
/*
* 예외 처리 시 사용.
* 사용법 :
* try {
*   예외가 발생할 수 있는 코드
* } catch (예외타입 e) {
*   예외타입에 해당하는 예외 발생 시 구현할 코드
* } finally {
*   예외 발생에 관계없이 마지막에 무조건 구현될 코드
* }
*
* */

}
